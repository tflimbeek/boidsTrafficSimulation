layout(local_size_x = 1, local_size_y = 1) in;

float delta(float t){
    return step(0.0, -t)*step(0.0, t);
}

float u(float t){
    return 1-step(0.0, -t);
}

// Calculate the vertices of the car for crash detection. Used in the separating axis theorem
vec2 carVertex(vec2 position, float rotation, uint corner){
    /*****************************************************************
    - position: (x, y) coordinates of center position in world space
    - rotation is the vehicles current rotation in world space
    - corner is the corner for which to calculate the vertex:
        - 0: rear right corner of the vehicle
        - 1: front right corner of the vehicle
        - 2: rear left corner of the vehicle
        - 3: front left corner of the vehicle
    *****************************************************************/
    float posX = 0.0;
    float posY = 0.0;
    switch (corner){
        // Calculate the vertex for the rear right corner of the vehicle
        case 0:
            posX = position.x + distanceToCorner*cos(-atan((l)/(w))-rotation);
            posY = position.y + distanceToCorner*sin(-atan((l)/(w))-rotation);
            break;
        // Calculate the vertex for the front right corner of the vehicle
        case 1:
            posX = position.x + distanceToCorner*cos(atan((l)/(w))-rotation);
            posY = position.y + distanceToCorner*sin(atan((l)/(w))-rotation);
            break;
        // Calculate the vertex for the front left corner of the vehicle
        case 2:
            posX = position.x + distanceToCorner*cos(atan((w)/(l))-rotation+PI_F/2);
            posY = position.y + distanceToCorner*sin(atan((w)/(l))-rotation+PI_F/2);
            break;
        // Calculate the vertex for the rear left corner of the vehicle
        case 3:
            posX = position.x + distanceToCorner*cos(-atan((w)/(l))-rotation-PI_F/2);
            posY = position.y + distanceToCorner*sin(-atan((w)/(l))-rotation-PI_F/2);
            break;
    }
    return vec2(posX, posY);
}


/********************************************************************************************
The function "separationDistance" is an experimental function for finding the minimum separation 
distance between vehicles instead of using the centrepoint to centrepoint difference. 
Due to an oversight in SAT calculations, this could not be tested on a large scale. 
The oversight has since been resolved, so the code below could be used as a base for these calculations.
********************************************************************************************/

float separationDistance(vec2 position_i, float rotation_i, vec2 position_j, float rotation_j){
    
    // Start off with the lowest possible value for separation and the highest possible value for the minimum separation
    float separation = FLT_MIN;
    float minimumSeparation = FLT_MAX;

    // Create list of all vertices of car i - Corner 0: RR, Corner 1: FR, Corner 2: FL, Corner 3: RL 
    vec2 vertices_i[4];    
    for(int verticeCount = 0; verticeCount < 4; verticeCount++){
        vertices_i[verticeCount] = carVertex(position_i.xy, rotation_j, verticeCount);
    }

    // Create list of all vertices of car j - Corner 0: RR, Corner 1: FR, Corner 2: FL, Corner 3: RL
    vec2 vertices_j[4];    
    for(int verticeCount = 0; verticeCount < 4; verticeCount++){
        vertices_j[verticeCount] = carVertex(position_j.xy, rotation_j, verticeCount);
    }

    // Loop over all vertices, calculate the normal axes and calculate (possibly new) minimum separation distance
    for(int vi=0; vi<4; vi++){
        vec2 normalAxis = normalize(vertices_i[(vi+1)%4]-vertices_i[vi]);
        

        for(int vj=0; vj<4; vj++){
            minimumSeparation = min(minimumSeparation, dot(vertices_j[vj]-vertices_i[vi], normalAxis));
        }
        if(minimumSeparation > separation){
            separation = minimumSeparation;
        }
    }
    return separation;

}

void main(){
    uint i = gl_GlobalInvocationID.x;
    uint N = uint(uN);//gl_NumWorkGroups.x;
    uint j = gl_GlobalInvocationID.y;
    uint M = uint(uM);//gl_NumWorkGroups.y - N;
    uint P = uint(uP);

    if(i==j){
        bDistanceState[i*N+j].dist = 0;
        bDistanceState[i*N+j].angle = 0;
        return;
    }

    if(bSimState[i].steps<bSimState[i].start){
        return;
    }

    float dist = 10*l;
    float angle = 0.0;
    vec2 iPos = bPosState[i].pos.xy; // position of the "current" vehicle

    // Check distance from i to j where i is a vehicle and j is a vehicle or a wall
    if(j >= N && j < N+M){
        // j is a wall
        
        // Get two points of wall and extract that wall's normal vector
        vec2 A = bWallPos[(j-N)*2] * scale;
        vec2 B = bWallPos[(j-N)*2+1] * scale;
        float norm = bWallInfo[j-N].norm;

        vec2 wA = A - iPos;
        vec2 wB = B - iPos;
        vec2 AB = B - A;
        vec2 BA = A - B;

        // Calculate alphaA and alphaB. MinMax is used to suppress NaN's
        float alphaA = acos(max(min(dot(wA, BA)/(length(wA)*length(BA)), 1.0), -1.0));
        float alphaB = acos(max(min(dot(wB, AB)/(length(wB)*length(AB)), 1.0), -1.0));

        // Calculate distance towards A and B
        float dAB = length(wA)*sin(alphaA)*u(PI_F/2-alphaA) + length(wA)*(u(alphaA-PI_F/2) + delta(alphaA - PI_F/2));
        float dBA = length(wB)*sin(alphaB)*u(PI_F/2-alphaB) + length(wB)*(u(alphaB-PI_F/2) + delta(alphaB - PI_F/2));
        // Combine everything
        dist = dAB*(u(alphaA-PI_F/2)+delta(alphaA-PI_F/2)); 
        dist += dBA*(u(alphaB-PI_F/2)+delta(alphaB-PI_F/2));
        dist += min(dAB, dBA)*u(PI_F/2-alphaA)*u(PI_F/2-alphaB);

        // Angle calculation
        // AB, BA, ABBA
        angle = (norm-alphaA+PI_F/2)*(u(alphaA-PI_F/2)+delta(alphaA-PI_F/2));
        angle += (norm-alphaB+PI_F/2)*(u(alphaB-PI_F/2)+delta(alphaB-PI_F/2)); 
        angle += (norm+PI_F/2)*u(PI_F/2-alphaA)*u(PI_F/2-alphaB);

        // Bound angle between 0 and 2 pi
        angle = mod(angle, 2*PI_F);

        // Flag a collision if the distance to a wall is smaller than a pre-defined collisionDistance
        if(dist<collisionDistance){
            bSimState[i].collided = 1;
        }

    } else if(j >= N+M){
        // j is a road marker
        // Get two points of wall and calculate that wall's normal
        vec2 A = bRoadMarkerPos[(j-(N+M))*2] * scale;
        vec2 B = bRoadMarkerPos[(j-(N+M))*2+1] * scale;
        float norm = bRoadMarkerInfo[j-(N+M)].norm;

        vec2 wA = A - iPos;
        vec2 wB = B - iPos;
        vec2 AB = B - A;
        vec2 BA = A - B;

        // Calculate alphaA and alphaB. MinMax is used to suppress NaN's
        float alphaA = acos(max(min(dot(wA, BA)/(length(wA)*length(BA)), 1.0), -1.0));
        float alphaB = acos(max(min(dot(wB, AB)/(length(wB)*length(AB)), 1.0), -1.0));

        // Calculate distance towards A and B
        float dAB = length(wA)*sin(alphaA)*u(PI_F/2-alphaA) + length(wA)*(u(alphaA-PI_F/2) + delta(alphaA - PI_F/2));
        float dBA = length(wB)*sin(alphaB)*u(PI_F/2-alphaB) + length(wB)*(u(alphaB-PI_F/2) + delta(alphaB - PI_F/2));
        // Combine everything
        dist = dAB*(u(alphaA-PI_F/2)+delta(alphaA-PI_F/2)); 
        dist += dBA*(u(alphaB-PI_F/2)+delta(alphaB-PI_F/2));
        dist += min(dAB, dBA)*u(PI_F/2-alphaA)*u(PI_F/2-alphaB);

        // Angle calculation
        // AB, BA, ABBA
        angle = (norm-alphaA+PI_F/2)*(u(alphaA-PI_F/2)+delta(alphaA-PI_F/2));
        angle += (norm-alphaB+PI_F/2)*(u(alphaB-PI_F/2)+delta(alphaB-PI_F/2)); 
        angle += (norm+PI_F/2)*u(PI_F/2-alphaA)*u(PI_F/2-alphaB);

        // Bound angle between 0 and 2 pi
        angle = mod(angle, 2*PI_F);


    }else{
        // j is a vehicle
        vec2 jPos = bPosState[j].pos.xy;
        dist = length(iPos-jPos);
        angle = acos(dot(vec2(cos(bPosState[i].rot+PI_F/2), sin(bPosState[i].rot+PI_F/2)), jPos-iPos)/length(jPos-iPos));
        angle = mod(angle, PI_F);

        //For colission detection, the separating axis theorem is used
        //Calculate the vertices for vehicle i
        vec2 vertices_i[4];    
        for(int verticeCount = 0; verticeCount < 4; verticeCount++){
            vertices_i[verticeCount] = carVertex(bPosState[i].pos.xy, bPosState[i].rot, verticeCount);
        }

        //Calculate the vertices for vehicle j
        vec2 vertices_j[4];
        for(int verticeCount = 0; verticeCount < 4; verticeCount++){
            vertices_j[verticeCount] = carVertex(bPosState[j].pos.xy, bPosState[j].rot, verticeCount);
        }
        
        vec2 axes[4];
        // Calculate the normals for vehicle i
        axes[0] = normalize(vertices_i[1]-vertices_i[2]);
        axes[1] = normalize(vertices_i[3]-vertices_i[2]);
        // Calculate the normals for vehicle j
        axes[2] = normalize(vertices_j[1]-vertices_j[2]);
        axes[3] = normalize(vertices_j[3]-vertices_j[2]);

        // Initialize variables
        bool foundSeparatingAxis = false;
        vec4 vehicle_i_projection;
        vec4 vehicle_j_projection;

        // Check for overlap in the normal projections (aCount = axis count)
        for(int aCount = 0; aCount < 4; aCount++){
     
            // Project vertices onto the axis (vCount = vertice count)
            for(int vCount = 0; vCount <4; vCount++){
                vehicle_i_projection[vCount] = dot(vertices_i[vCount], axes[aCount]);
                vehicle_j_projection[vCount] = dot(vertices_j[vCount], axes[aCount]);
            }
            
            // Find minimum and maximum points of projection for vehicle i
            float min_vehicle_i = vehicle_i_projection[0];
            float max_vehicle_i = vehicle_i_projection[0];
            for (int vCount = 1; vCount < 4; vCount++) {
                min_vehicle_i = min(min_vehicle_i, vehicle_i_projection[vCount]);
                max_vehicle_i = max(max_vehicle_i, vehicle_i_projection[vCount]);
            }
            
            // Find minimum and maximum points of projection for vehicle j
            float min_vehicle_j = vehicle_j_projection[0];
            float max_vehicle_j = vehicle_j_projection[0];
            for (int vCount = 1; vCount < 4; vCount++) {
                min_vehicle_j = min(min_vehicle_j, vehicle_j_projection[vCount]);
                max_vehicle_j = max(max_vehicle_j, vehicle_j_projection[vCount]);
            }
        
            // Check for overlap. If there is no overlap, there is no collision so break out of loop
            if(max_vehicle_i <= min_vehicle_j || max_vehicle_j <= min_vehicle_i){
                foundSeparatingAxis = true;
                break;
            }
            
        }

        // If no separating axis has been found, flag a collision
        if(foundSeparatingAxis == false && bSimState[j].start<bSimState[j].steps){
            bSimState[i].collided = 1;
        }

    }

    bDistanceState[j*N+i].dist = dist;
    bDistanceState[j*N+i].angle = angle;
}